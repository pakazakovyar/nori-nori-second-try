{# @pebvariable name="model" type="ru.fspn.web.models.NoriNoriVM" #}
<!doctype html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <style>
        .highlight {
            background-color: gray;
        }
        #resultMessage {
            margin-top: 20px;
            padding: 10px;
            font-weight: bold;
        }
        .success {
            color: green;
        }
        .fail {
            color: red;
        }
    </style>
</head>
<body>

{{ model.noriNori | raw }}


<button id="submitColors" class="btn btn-primary mt-3">Отправить цвета</button>
<div id="resultMessage"></div>

<script>
    const table = document.getElementById("myTable");
    const rows = table.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
        const cells = rows[i].getElementsByTagName("td");

        for (let j = 0; j < cells.length; j++) {
            if (j < cells.length - 1 && cells[j].textContent !== cells[j + 1].textContent) {
                cells[j].style.borderRight = "1px solid black";
            }
            if (i < rows.length - 1) {
                const cellBelow = rows[i + 1].getElementsByTagName("td")[j];
                if (cells[j].textContent !== cellBelow.textContent) {
                    cells[j].style.borderBottom = "1px solid black";
                }
            }
        }
    }

    const cells = document.querySelectorAll('td');
    cells.forEach(cell => {
        cell.addEventListener('click', function() {
            this.classList.toggle('highlight');
        });
    });

    document.getElementById('submitColors').addEventListener('click', function() {
        const colorMatrix = [];
        const rows = table.getElementsByTagName("tr");
        const resultMessage = document.getElementById('resultMessage');

        for (let i = 0; i < rows.length; i++) {
            const cells = rows[i].getElementsByTagName("td");
            const rowColors = [];

            for (let j = 0; j < cells.length; j++) {
                // Получаем цвет ячейки (если выделена, то 'gray', иначе 'white')
                const color = cells[j].classList.contains('highlight') ? 'gray' : 'white';
                rowColors.push(color);
            }

            colorMatrix.push(rowColors);
        }

        fetch('/norinori', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ colors: colorMatrix }),
        })
        .then(response => response.json())
        .then(data => {
            resultMessage.textContent = data.message;
            resultMessage.className = data.result === 'success' ? 'success' : 'fail';
        })
        .catch((error) => {
            console.error('Ошибка:', error);
            resultMessage.textContent = 'Произошла ошибка';
            resultMessage.className = 'fail';
        });
    });
</script>
</body>
</html>